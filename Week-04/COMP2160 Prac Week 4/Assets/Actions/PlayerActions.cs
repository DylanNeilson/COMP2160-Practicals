//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Actions/PlayerActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerActions"",
    ""maps"": [
        {
            ""name"": ""TowerDefence"",
            ""id"": ""6d3a5843-8785-4421-b0eb-8e67d48244f1"",
            ""actions"": [
                {
                    ""name"": ""SpawnPosition"",
                    ""type"": ""Value"",
                    ""id"": ""d8105a9e-477e-4b33-ae51-f20b6f67ea2c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SpawnTower"",
                    ""type"": ""Button"",
                    ""id"": ""258fb624-99e1-4c38-b8bf-aab9d3be2103"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""567f4f5d-c5a5-4280-b7df-6054c4035a06"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpawnPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9c255dec-6740-4be3-afda-3922d163b488"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpawnTower"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // TowerDefence
        m_TowerDefence = asset.FindActionMap("TowerDefence", throwIfNotFound: true);
        m_TowerDefence_SpawnPosition = m_TowerDefence.FindAction("SpawnPosition", throwIfNotFound: true);
        m_TowerDefence_SpawnTower = m_TowerDefence.FindAction("SpawnTower", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // TowerDefence
    private readonly InputActionMap m_TowerDefence;
    private ITowerDefenceActions m_TowerDefenceActionsCallbackInterface;
    private readonly InputAction m_TowerDefence_SpawnPosition;
    private readonly InputAction m_TowerDefence_SpawnTower;
    public struct TowerDefenceActions
    {
        private @PlayerActions m_Wrapper;
        public TowerDefenceActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @SpawnPosition => m_Wrapper.m_TowerDefence_SpawnPosition;
        public InputAction @SpawnTower => m_Wrapper.m_TowerDefence_SpawnTower;
        public InputActionMap Get() { return m_Wrapper.m_TowerDefence; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TowerDefenceActions set) { return set.Get(); }
        public void SetCallbacks(ITowerDefenceActions instance)
        {
            if (m_Wrapper.m_TowerDefenceActionsCallbackInterface != null)
            {
                @SpawnPosition.started -= m_Wrapper.m_TowerDefenceActionsCallbackInterface.OnSpawnPosition;
                @SpawnPosition.performed -= m_Wrapper.m_TowerDefenceActionsCallbackInterface.OnSpawnPosition;
                @SpawnPosition.canceled -= m_Wrapper.m_TowerDefenceActionsCallbackInterface.OnSpawnPosition;
                @SpawnTower.started -= m_Wrapper.m_TowerDefenceActionsCallbackInterface.OnSpawnTower;
                @SpawnTower.performed -= m_Wrapper.m_TowerDefenceActionsCallbackInterface.OnSpawnTower;
                @SpawnTower.canceled -= m_Wrapper.m_TowerDefenceActionsCallbackInterface.OnSpawnTower;
            }
            m_Wrapper.m_TowerDefenceActionsCallbackInterface = instance;
            if (instance != null)
            {
                @SpawnPosition.started += instance.OnSpawnPosition;
                @SpawnPosition.performed += instance.OnSpawnPosition;
                @SpawnPosition.canceled += instance.OnSpawnPosition;
                @SpawnTower.started += instance.OnSpawnTower;
                @SpawnTower.performed += instance.OnSpawnTower;
                @SpawnTower.canceled += instance.OnSpawnTower;
            }
        }
    }
    public TowerDefenceActions @TowerDefence => new TowerDefenceActions(this);
    public interface ITowerDefenceActions
    {
        void OnSpawnPosition(InputAction.CallbackContext context);
        void OnSpawnTower(InputAction.CallbackContext context);
    }
}
